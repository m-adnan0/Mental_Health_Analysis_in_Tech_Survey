# -*- coding: utf-8 -*-
"""Portfolio Project 02

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A9TTZZxvxltoG6tdvv6flsTNZ2ZucsUQ
"""

from google.colab import files

# Use the upload function to upload the file
uploaded = files.upload()

# Assuming the uploaded file is named survey.csv
import pandas as pd
import io

# Load the data into a DataFrame
df = pd.read_csv(io.BytesIO(uploaded['survey.csv']))

# Display the first few rows of the dataset
df.head()

import pandas as pd
import numpy as np

#Explore the Dataset
# Display basic information about the dataset
df.info()

# Generate descriptive statistics
df.describe()

# Check for missing values
df.isnull().sum()

# Drop rows with missing values (if necessary)
df_cleaned = df.dropna()

# Impute missing values using appropriate methods
# Example: df['column_name'].fillna(df['column_name'].mean(), inplace=True)

# Check for duplicates
df.duplicated().sum()

# Remove duplicates
df_cleaned = df.drop_duplicates()

# Convert columns to appropriate data types
# Example: df['column_name'] = pd.to_numeric(df['column_name'], errors='coerce')

# Rename columns
# Example: df.rename(columns={'old_name': 'new_name'}, inplace=True)

# Display unique values in a column
# Example: df['column_name'].unique()

# Handle inconsistencies or typos in categorical data

# Example: Creating dummy variables for categorical columns
# df = pd.get_dummies(df, columns=['categorical_column'])

df_cleaned.to_csv('cleaned_dataset.csv', index=False)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Check unique values in the 'Country' column
df['Country'].unique()

# Explore mental health frequency by country
plt.figure(figsize=(12, 6))
sns.countplot(x='Country', data=df, order=df['Country'].value_counts().index)
plt.xticks(rotation=90)
plt.title('Mental Health Frequency by Country')
plt.show()

# Explore attitudes towards mental health in different countries
# (You can focus on variables like 'coworkers', 'supervisor', 'mental_health_interview', 'obs_consequence', etc.)

# Visualization of attitudes towards mental health discussions by country
plt.figure(figsize=(15, 8))
sns.countplot(x='Country', hue='coworkers', data=df)
plt.title('Attitudes Towards Mental Health Discussions by Country')
plt.xticks(rotation=90)
plt.xlabel('Country')
plt.ylabel('Count')
plt.legend(title='Discuss with Coworkers', loc='upper right', labels=['No', 'Yes'])
plt.show()

# Use appropriate statistical tests (e.g., Chi-square, ANOVA) to test the significance of variations
# between attitudes towards mental health in different countries.

from scipy.stats import chi2_contingency

# Example: Chi-square test for independence between 'Country' and 'coworkers'
contingency_table = pd.crosstab(df['Country'], df['coworkers'])
chi2, p, _, _ = chi2_contingency(contingency_table)

print(f"Chi-square value: {chi2}")
print(f"P-value: {p}")

# Import necessary library for statistical tests
from scipy.stats import chi2_contingency

# Example: Chi-square test for independence between 'Country' and 'coworkers'
contingency_table = pd.crosstab(df['Country'], df['coworkers'])

# Perform Chi-square test
chi2, p, _, _ = chi2_contingency(contingency_table)

# Display the results
print(f"Chi-square value: {chi2}")
print(f"P-value: {p}")

# Display the contingency table
print("\nContingency Table:")
print(contingency_table)

import numpy as np

# Convert 'Country_Encoded' to a numeric data type
df['Country_Encoded'] = pd.to_numeric(df['Country_Encoded'], errors='coerce')

# Encode 'treatment' if it's a categorical variable
treatment_mapping = {'Yes': 1, 'No': 0}  # Update this based on your data
df['treatment_Encoded'] = df['treatment'].map(treatment_mapping)

# Drop rows with missing values in the specified columns
df_cleaned = df[['Country_Encoded', 'treatment_Encoded']].dropna()

# Check for and handle infinite values
df_cleaned.replace([np.inf, -np.inf], np.nan, inplace=True)
df_cleaned.dropna(inplace=True)

# Calculate Pearson correlation coefficient
correlation_coefficient, p_value = pearsonr(df_cleaned['Country_Encoded'], df_cleaned['treatment_Encoded'])

# Display the results
print(f"Pearson correlation coefficient: {correlation_coefficient}")
print(f"P-value: {p_value}")

import pandas as pd

# Create a DataFrame to store the correlation results
correlation_results = pd.DataFrame(columns=['Variable 1', 'Variable 2', 'Correlation Coefficient', 'P-value'])

# Add the correlation results to the DataFrame
correlation_results = correlation_results.append({
    'Variable 1': 'Country_Encoded',
    'Variable 2': 'treatment_Encoded',
    'Correlation Coefficient': correlation_coefficient,
    'P-value': p_value
}, ignore_index=True)

# Display the correlation results table
print(correlation_results)

!pip install dash

# Import necessary libraries
import pandas as pd
import plotly.express as px
from IPython.display import display
import plotly.graph_objects as go

# Assuming you already have the correlation_results DataFrame
# Replace this with your actual DataFrame

# Create a scatter plot for correlation coefficient
fig_scatter = px.scatter(correlation_results, x='Variable 1', y='Variable 2', size='Correlation Coefficient',
                         color='P-value', title='Correlation Coefficient and P-value',
                         labels={'Variable 1': 'Variable 1', 'Variable 2': 'Variable 2',
                                 'Correlation Coefficient': 'Correlation Coefficient', 'P-value': 'P-value'})

# Create a table for correlation results
fig_table = go.Figure(data=[go.Table(header=dict(values=['Variable 1', 'Variable 2', 'Correlation Coefficient', 'P-value']),
                                     cells=dict(values=[correlation_results['Variable 1'], correlation_results['Variable 2'],
                                                        correlation_results['Correlation Coefficient'],
                                                        correlation_results['P-value']]))])

# Display the scatter plot
display(fig_scatter)

# Display the table
display(fig_table)